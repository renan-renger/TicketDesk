@using System.Reflection
@using TicketDesk.PushNotifications
@model Dictionary<Type, TicketDesk.PushNotifications.Model.ApplicationPushNotificationSetting.PushNotificationDeliveryProviderSetting>

@foreach (var type in Model.Keys)
{
    var settings = Model[type];
    @*@Html.DescriptionFor(type, string.Empty) @:(@type.Name)


        <div>Enabled: @settings.IsEnabled</div>*@
    @*if (settings.IsEnabled)
        {
            var properties = settings.ProviderConfigurationData

        }*@


    <div class="form-group">
        @Html.DescriptionFor(type, "col-md-4 col-sm-4 control-label", "label")
        <div class="col-md-8 col-sm-8">
            <label class="checkbox-inline" style="vertical-align: top;">
                @Html.CheckBox("IsEnabled", settings.IsEnabled, new { disabled = "disabled" })
                @Html.PromptFor(model => settings.IsEnabled);


            </label>

            <a class="btn btn-link" href="@Url.Action("ConfigureDeliveryProvider", "PushNotificationSettings", new {providerAssemblyQualifiedName = type.AssemblyQualifiedName})">
                <i class="fa fa-gear"> Configure</i>
            </a>

        </div>

    </div>
    if (settings.IsEnabled)
    {
        var provider = PushNotificationDeliveryManager.DeliveryProviders.FirstOrDefault(p => p.GetType().AssemblyQualifiedName == settings.ProviderAssemblyQualifiedName);
        if (provider != null)
        {
            PropertyInfo[] properties = provider.GetType().GetProperties(BindingFlags.Public);
            foreach (PropertyInfo property in properties)
            {
                <div>@property.GetValue(property, null)</div>
            }
        }
    }

}

